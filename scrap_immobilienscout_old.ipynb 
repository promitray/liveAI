{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Real estate ROI calculator "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configurables\n",
    "Change your url and location here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replace this url with the url of your search results\n",
    "#url = 'https://www.immobilienscout24.de/Suche/de/berlin/berlin/wohnung-kaufen?enteredFrom=one_step_search'\n",
    "# TODO concatenate url with region and city\n",
    "# state = \"sachsen-anhalt\"\n",
    "# city = \"magdeburg\"\n",
    "url_to_crawl = 'https://www.immobilienscout24.de/Suche/de/sachsen-anhalt/magdeburg/wohnung-kaufen?enteredFrom=one_step_search'\n",
    "csv_file_name = 'immobilienscout_result.csv'\n",
    "\n",
    "notary_percentage = 0.015\n",
    "transfer_tax_percentage = 0.05\n",
    "land_registry_tax_percentage = 0.005\n",
    "equity_percentage = 0.2\n",
    "interest_rate = 0.01\n",
    "mortgage_payment_rate = 0.02\n",
    "rent_price_index = 11\n",
    "additional_costs_rate_per_m2 = 0.9 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "import scrapy\n",
    "from scrapy.crawler import CrawlerProcess\n",
    "from scrapy import Selector\n",
    "import selenium\n",
    "from selenium import webdriver\n",
    "import chromedriver_binary\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', 100)\n",
    "\n",
    "import json\n",
    "import re\n",
    "import numpy as np\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "columns = ['Title', 'Address', 'Person', 'Telefon', 'Mobil', 'Fax', 'Kaufpreis', 'Gesch채tzte Monatsrate', 'Zimmer', 'Wohnfl채che ca.', 'Tags', 'Typ', 'Etage', 'Etage Total', 'Schlafzimmer', 'Provision f체r K채ufer', 'Hausgeld', 'Baujahr', 'Objektzustand', 'Heizungsart', 'Energieeffizienzklasse', 'Lage']\n",
    "\n",
    "df_base = pd.DataFrame(columns = columns)\n",
    "\n",
    "options = Options()\n",
    "options.headless = True\n",
    "\n",
    "crawler_name = 'scrap_immobilienscout'\n",
    "\n",
    "base_uri = 'immobilienscout24.de'\n",
    "base_url = 'https://www.immobilienscout24.de'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true,
    "tags": [
     "outputPrepend"
    ]
   },
   "outputs": [],
   "source": [
    "driver = webdriver.Chrome()\n",
    "# OLD configuration\n",
    "#driver = webdriver.Chrome(options=options, executable_path=\"chromedriver.exe\")\n",
    "\n",
    "class Scrap_immobilienscout(scrapy.Spider):\n",
    "    \n",
    "    name = crawler_name\n",
    "    \n",
    "    def start_requests(self):\n",
    "        first_page = urllib.request.urlopen(url_to_crawl)\n",
    "        max_pages = first_page.read()\n",
    "        max_pages = max_pages.decode(\"utf8\")\n",
    "        first_page.close()\n",
    "\n",
    "        max_pages_selector = Selector(text = max_pages)\n",
    "        max_pages = max_pages_selector.xpath('//select[@aria-label=\"Seitenauswahl\"]/option[last()]/@value').extract_first()\n",
    "        max_pages = int(max_pages) if max_pages is not None else 1\n",
    "        \n",
    "        base_url = url_to_crawl.replace('enteredFrom=one_step_search', '')\n",
    "        \n",
    "        for page_number in range(max_pages):\n",
    "            url = base_url + 'pagenumber=' + str(page_number + 1)\n",
    "            yield scrapy.Request(url, callback = self.parse_properties_list)\n",
    "    \n",
    "    def parse_properties_list(self, response):\n",
    "        \n",
    "        property_urls = response.xpath('//a[contains(@class, \"result-list-entry__brand-title-container\")]/@href').extract()\n",
    "        \n",
    "        for url in property_urls:\n",
    "            if base_uri not in url:\n",
    "                url = base_url + url + '#/'\n",
    "                driver.get(url)\n",
    "                src = driver.page_source\n",
    "                self.scrap_property(src)\n",
    "    \n",
    "    # TODO rename variables\n",
    "    # TODO clarify default values\n",
    "    # TODO fix parse issues (int, roundings, etc.)\n",
    "    def scrap_property(self, src):\n",
    "        sel = Selector(text = src)\n",
    "        \n",
    "        title = sel.css('h1#expose-title ::text').extract_first()\n",
    "        \n",
    "        address = sel.xpath('//div[@class=\"address-block\"]//span[@class=\"block font-nowrap print-hide\"]//text()').extract_first()\n",
    "        address = address.strip() if address is not None else ''\n",
    "        region = sel.css('span.zip-region-and-country::text').extract_first()\n",
    "        address += ' ' + region if region is not None else ''\n",
    "        \n",
    "        person = sel.xpath('//div[@data-qa=\"contactName\"]//text()').extract_first()\n",
    "        \n",
    "        phone = sel.xpath('//script//text()').extract_first()\n",
    "        phone = phone if phone is not None else ''\n",
    "        telefon = re.findall('\"phoneNumber\":\\{\"contactNumber\":\"(\\+?[0-9 ]*)\"\\}', phone)\n",
    "        telefon = int(telefon[0].replace(' ', '')) if len(telefon) > 0 else None\n",
    "        \n",
    "        mobil = re.findall('\"cellPhoneNumber\":\\{\"contactNumber\":\"(\\+?[0-9 ]*)\"\\}', phone)\n",
    "        mobil = mobil[0] if len(mobil) > 0 else ''\n",
    "        mobil = mobil.replace(' ', '')\n",
    "\n",
    "        fax = re.findall('\"faxNumber\":\\{\"contactNumber\":\"(\\+?[0-9 ]*)\"\\}', phone)\n",
    "        fax = fax[0] if len(fax) > 0 else ''\n",
    "        fax = fax.replace(' ', '')\n",
    "        \n",
    "        price = sel.xpath('//dd[contains(@class, \"is24qa-kaufpreis\")]//text()').extract_first()\n",
    "        price = re.sub('[^0-9]', '', price) if price is not None else 0\n",
    "        price = int(price)\n",
    "        \n",
    "        monthly_rate = sel.xpath('//span[contains(@class, \"monthly-rate-result\") and contains(@class, \"monthly-rate-value\")]//text()').extract_first()\n",
    "        monthly_rate = re.sub('[^0-9]', '', monthly_rate) if monthly_rate is not None else 0\n",
    "        monthly_rate = int(monthly_rate)\n",
    "        \n",
    "        rooms_count = sel.xpath('//dd[contains(@class,\"is24qa-zimmer\")]/text()').extract_first()\n",
    "        rooms_count = float(rooms_count) if rooms_count is not None else 0\n",
    "        \n",
    "        living_area = sel.xpath('//dd[contains(@class, \"is24qa-wohnflaeche-ca\")]/text()').extract_first()\n",
    "        living_area = re.sub('[^0-9]', '', living_area) if living_area is not None else 0\n",
    "        living_area = int(living_area)\n",
    "        \n",
    "        tags = sel.xpath('//div[contains(@class, \"criteriagroup\") and contains(@class, \"boolean-listing\")]//span[contains(@class, \"palm-hide\")]/text()').extract()\n",
    "        tags = list(set(tags))\n",
    "        tags = [t for t in tags if t != ' ']\n",
    "        tags = tags if len(tags) > 0 else ''\n",
    "        \n",
    "        p_type = sel.xpath('//dd[contains(@class, \"is24qa-typ\")]/text()').extract_first()\n",
    "        \n",
    "        floor = sel.xpath('//dd[contains(@class, \"is24qa-etage\")]//text()').extract_first()\n",
    "        floor = floor if floor is not None else ''\n",
    "        floor = re.findall('[0-9]+', floor)\n",
    "        total_floors = int(floor[1]) if len(floor) > 1 else 0\n",
    "        floor = int(floor[0]) if len(floor) > 0 else 0\n",
    "        \n",
    "        bedroom = sel.xpath('//dd[contains(@class, \"is24qa-schlafzimmer\")]//text()').extract_first()\n",
    "        bedroom = re.sub('[^0-9]', '', bedroom) if bedroom is not None else 0\n",
    "        bedroom = int(bedroom)\n",
    "        \n",
    "        allowance = sel.xpath('//dd[contains(@class, \"is24qa-hausgeld\")]//text()').extract_first()\n",
    "        allowance = re.sub('[^0-9]', '', allowance) if allowance is not None else 0\n",
    "        allowance = int(allowance)\n",
    "        \n",
    "        commission = sel.xpath('//dd[contains(@class, \"is24qa-provision\")]/text()').extract_first()\n",
    "        commission = re.search('[0-9]+,?[0-9]*', commission).group() if commission is not None else ''\n",
    "        commission = commission.replace(',', '.')\n",
    "        commission = float(commission) if len(commission) > 0 else 0\n",
    "        \n",
    "        baujahr = sel.xpath('//dd[contains(@class, \"is24qa-baujahr\")]//text()').extract_first()\n",
    "        \n",
    "        objektzustand = sel.xpath('//dd[contains(@class, \"is24qa-objektzustand\")]//text()').extract_first()\n",
    "        \n",
    "        heizungsart = sel.xpath('//dd[contains(@class, \"is24qa-heizungsart\")]//text()').extract_first()\n",
    "        \n",
    "        energieeffizienzklasse = sel.xpath('//dd[contains(@class, \"is24qa-energieeffizienzklasse\")]//text()').extract_first()\n",
    "        \n",
    "        location = sel.xpath('//pre[contains(@class, \"is24qa-lage\")]/text()').extract_first()\n",
    "\n",
    "        lst_row = [title, address, person, telefon, mobil, fax, price, monthly_rate, rooms_count, living_area, tags, p_type, floor, total_floors, bedroom, commission, allowance, baujahr, objektzustand, heizungsart, energieeffizienzklasse, location]\n",
    "        df_base.loc[len(df_base)] = lst_row\n",
    "        df_base.to_csv('berlin_properties.csv', index=False)\n",
    "        \n",
    "process = CrawlerProcess()\n",
    "process.crawl(Scrap_immobilienscout)\n",
    "process.start()\n",
    "# TODO unblock process. See: https://docs.scrapy.org/en/latest/topics/practices.html "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parse to CSV again\n",
    "df_base.to_csv(csv_file_name, index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dataframe dimensions\n",
    "df_base.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# column datatypes\n",
    "df_base.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_base.select_dtypes(include=['object']).isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_base.head(10)\n",
    "#df[0:5]\n",
    "#df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO transform into numerical values for historgrams\n",
    "# df_base.hist(xrot=-45, figsize=(14,14))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_base.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "outputPrepend"
    ]
   },
   "outputs": [],
   "source": [
    "# TODO fix usage of list\n",
    "# TODO data needs to be fixed\n",
    "for features in df_base.dtypes[df_base.dtypes == 'object'].index:\n",
    "    sns.countplot(y=features, data=df_base)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data argmentation\n",
    "Goal is to calculate the yearly ROI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance = df_base[['Kaufpreis', 'Provision f체r K채ufer']]\n",
    "df_finance['notary_costs'] = notary_percentage * df_base['Kaufpreis']\n",
    "\n",
    "df_finance['land_registry_tax'] = land_registry_tax_percentage * df_base['Kaufpreis']\n",
    "df_finance['real_estate_transfer_tax'] = transfer_tax_percentage * df_base['Kaufpreis']\n",
    "df_finance['provision'] = df_finance['Kaufpreis'] * df_finance['Provision f체r K채ufer'] * 0.01 # TODO fix while parsing from scraper already\n",
    "df_finance['total_buying_price'] = df_finance['Kaufpreis'] + df_finance['notary_costs'] + df_finance['land_registry_tax'] + df_finance['real_estate_transfer_tax'] + df_finance['provision']\n",
    "df_finance['equity'] = equity_percentage * df_total_price['total_buying_price']\n",
    "df_finance['debt'] = df_total_price['total_buying_price'] - df_finance['equity']\n",
    "df_finance['interest_rate_monthly'] = interest_rate * df_finance['debt'] / 12\n",
    "df_finance['mortgage_payment'] = mortgage_payment_rate * df_finance['debt']\n",
    "df_finance['monthly_rent'] = rent_price_index * df_base['Wohnfl채che ca.']\n",
    "df_finance['additional_costs'] = additional_costs_rate_per_m2 * df_base['Wohnfl채che ca.']\n",
    "df_finance['cashflow'] = df_finance['monthly_rent'] - df_finance['interest_rate_monthly'] - df_finance['mortgage_payment'] - df_finance['additional_costs']\n",
    "df_finance['ROI'] = (df_finance['cashflow'] * 12) / df_finance['equity'] \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total_price['notar'] = 0.015 * df_base['Kaufpreis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total_price['grundbuchamt'] = 0.005 * df_base['Kaufpreis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total_price['Grunderwerbsteur'] = 0.05 * df_base['Kaufpreis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total_price['Provision'] = df_total_price['Kaufpreis'] * df_total_price['Provision f체r K채ufer'] * 0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total_price['total_buying_price'] = df_total_price['Kaufpreis'] + df_total_price['notar'] + df_total_price['grundbuchamt'] + df_total_price['Grunderwerbsteur'] + df_total_price['Provision']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance = pd.DataFrame(columns = ['eigencapital', 'interestrate', 'mortgage_payment', 'Fremdcapital'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['eigencapital'] = 0.2 * df_total_price['total_buying_price']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['interestrate'] = (0.01 * 0.8 * df_total_price['total_buying_price'])/12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['mortgage_payment'] = 0.02 * 0.8 * df_total_price['total_buying_price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['Fremdcapital'] = df_total_price['total_buying_price'] - df_finance['eigencapital']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mietindex = 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['monthly_rent'] = mietindex * df_base['Wohnfl채che ca.']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nebenkosten_per_sq_m = 0.9 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_base['Wohnfl채che ca.']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['Nebenkosten'] = Nebenkosten_per_sq_m * df_base['Wohnfl채che ca.']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['cashflow'] = df_finance['monthly_rent']-df_finance['interestrate']-df_finance['mortgage_payment']-df_finance['Nebenkosten']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance['ROI'] = (df_finance['cashflow'] * 12)/df_finance['eigencapital'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_finance[df_finance['cashflow'] > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.4 64-bit ('venv')",
   "language": "python",
   "name": "python37464bitvenvf84fa1759c7d4ed2b6a00700da626d4e"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4-final"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}